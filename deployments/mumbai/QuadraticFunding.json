{
  "address": "0x84aFE7D82eE49D0cf581C50469CA54dda27E7C67",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_compoundCometAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oneInchAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "COMPOUND_COMET_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONEINCH_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectIndex",
          "type": "uint256"
        }
      ],
      "name": "contribute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "contributorFlags",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_endRoundDate",
          "type": "uint256"
        }
      ],
      "name": "createPodiumRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "createProject",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "projectIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_endProjectApplicationDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startRoundDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endRoundDate",
          "type": "uint256"
        },
        {
          "internalType": "enum QuadraticFunding.StakingPlatform",
          "name": "_platform",
          "type": "uint8"
        }
      ],
      "name": "createRound",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "endProjectApplicationDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startRoundDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endRoundDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "matchAmount",
          "type": "uint256"
        },
        {
          "internalType": "enum QuadraticFunding.StakingPlatform",
          "name": "platform",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deleteRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributePodiumPrizes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectIndex",
          "type": "uint256"
        }
      ],
      "name": "podiumVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "podiumVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "projectIPFSHashes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "projectNextIPFSHashIDs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quadraticFunding",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        }
      ],
      "name": "revokeWhitelistContributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_ipfsHashes",
          "type": "string[]"
        }
      ],
      "name": "uploadResults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        }
      ],
      "name": "whitelistContributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc44cfcc91fe2fbfa597743ab94c69d7f60146d5e926d9080c5a21721f1b3aeee",
  "receipt": {
    "to": null,
    "from": "0x1cDC2A4fF8d374D91a1161C142cc496FBF5547Ec",
    "contractAddress": "0x84aFE7D82eE49D0cf581C50469CA54dda27E7C67",
    "transactionIndex": 2,
    "gasUsed": "1461333",
    "logsBloom": "0x
    "blockHash": "0x44c06110f3083596ff337acfdc01049d7f38b4593b4a4d307a1f7add7ce2b852",
    "transactionHash": "0xc44cfcc91fe2fbfa597743ab94c69d7f60146d5e926d9080c5a21721f1b3aeee",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 40455940,
        "transactionHash": "0xc44cfcc91fe2fbfa597743ab94c69d7f60146d5e926d9080c5a21721f1b3aeee",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000001cdc2a4ff8d374d91a1161c142cc496fbf5547ec",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000cfaafc1e8ad0000000000000000000000000000000000000000000000000015eecf589ab694df00000000000000000000000000000000000000000000347f89e1d5ccc70017d600000000000000000000000000000000000000000000000015e1d4a8d8cde7df00000000000000000000000000000000000000000000347f89eed07c88e8c4d6",
        "logIndex": 12,
        "blockHash": "0x44c06110f3083596ff337acfdc01049d7f38b4593b4a4d307a1f7add7ce2b852"
      }
    ],
    "blockNumber": 40455940,
    "cumulativeGasUsed": "1723908",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1cDC2A4fF8d374D91a1161C142cc496FBF5547Ec",
    "0x1cDC2A4fF8d374D91a1161C142cc496FBF5547Ec",
    "0x1cDC2A4fF8d374D91a1161C142cc496FBF5547Ec"
  ],
  "numDeployments": 1,
  "solcInputHash": "274c12ec810f948cc0b26196d3497732",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_compoundCometAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oneInchAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"COMPOUND_COMET_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONEINCH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectIndex\",\"type\":\"uint256\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributorFlags\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endRoundDate\",\"type\":\"uint256\"}],\"name\":\"createPodiumRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createProject\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"projectIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endProjectApplicationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startRoundDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endRoundDate\",\"type\":\"uint256\"},{\"internalType\":\"enum QuadraticFunding.StakingPlatform\",\"name\":\"_platform\",\"type\":\"uint8\"}],\"name\":\"createRound\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"endProjectApplicationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startRoundDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endRoundDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"matchAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum QuadraticFunding.StakingPlatform\",\"name\":\"platform\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributePodiumPrizes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectIndex\",\"type\":\"uint256\"}],\"name\":\"podiumVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"podiumVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectIPFSHashes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectNextIPFSHashIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quadraticFunding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"revokeWhitelistContributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_ipfsHashes\",\"type\":\"string[]\"}],\"name\":\"uploadResults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"whitelistContributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deleteRound()\":{\"notice\":\"Note: We assume the sign of a bad round is just based on endRoundDate\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/QuadraticFunding.sol\":\"QuadraticFunding\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\n// computes square roots using the babylonian method\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\nlibrary Babylonian {\\n    // credit for this implementation goes to\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\n        // however that code costs significantly more gas\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\\n\",\"keccak256\":\"0x18ce9e3f6c568317f6aa234597cc694fdeba12481cc5689e03e8074bde103280\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Comet.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface Comet {\\n  function baseScale() external view returns (uint);\\n  function supply(address asset, uint amount) external;\\n  function withdraw(address asset, uint amount) external;\\n\\n  function getSupplyRate(uint utilization) external view returns (uint);\\n  function getBorrowRate(uint utilization) external view returns (uint);\\n\\n  function baseTokenPriceFeed() external view returns (address);\\n\\n  function numAssets() external view returns (uint8);\\n\\n  function getUtilization() external view returns (uint);\\n\\n  function baseTrackingSupplySpeed() external view returns (uint);\\n  function baseTrackingBorrowSpeed() external view returns (uint);\\n\\n  function totalSupply() external view returns (uint256);\\n  function totalBorrow() external view returns (uint256);\\n\\n  function collateralBalanceOf(address account, address asset) external view returns (uint128);\\n\\n  function baseIndexScale() external pure returns (uint64);\\n}\\n\",\"keccak256\":\"0x15163744eb2ec66c918a62c8acbbf2925230a7c61d3d363bd7e7f4b8e04a7217\"},\"contracts/IWETH9.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface IWETH9 {\\n    function deposit() external payable;\\n    function withdraw(uint wad) external;\\n    function totalSupply() external view returns (uint);\\n    function approve(address guy, uint wad) external returns (bool);\\n    function transfer(address dst, uint wad) external returns (bool);\\n    function transferFrom(address src, address dst, uint wad) external;\\n}\\n\",\"keccak256\":\"0x26f6c66a28cebd4dd2a3bc3201ece68d135c988694263121e10885f6921f3c69\"},\"contracts/QuadraticFunding.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\nimport \\\"./Babylonian.sol\\\";\\nimport \\\"./IWETH9.sol\\\";\\nimport \\\"./Comet.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\ncontract QuadraticFunding {\\n\\n    //TODO: Use OpenZeppelin Ownable\\n    address owner;\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == owner,\\n            \\\"Only owner can call this.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyContributor() {\\n        require(\\n            (contributorFlags[msg.sender] & CONTRIBUTOR_WHITELIST) != 0x0,\\n            \\\"Only contributor can call this.\\\"\\n        );\\n        _;\\n    }\\n\\n    enum StakingPlatform { OneInch, Compound }\\n\\n    struct Round {\\n        uint256 endProjectApplicationDate;\\n        uint256 startRoundDate;\\n        uint256 endRoundDate;\\n        uint256 matchAmount;\\n        StakingPlatform platform;\\n    }\\n\\n    struct Project {\\n        address payable owner;\\n        string name;\\n        uint256 matchedQFFunds;\\n        bool active;\\n    }\\n    \\n    //Project array index mapped to nextContributionID index mapped to contributions  \\n    mapping(uint256 => mapping(uint256 => Contribution)) contributions;\\n    uint256 nextContributionID;\\n\\n    struct Contribution {\\n        address contributor;\\n        uint256 amount;\\n    }\\n\\n    mapping(address => uint128) public contributorFlags;\\n    uint128 internal constant CONTRIBUTOR_WHITELIST = 0x1;\\n    uint128 internal constant CONTRIBUTOR_CONTRIBUTED = 0x2;\\n\\n    Round public currentRound;\\n    Project[] projects;\\n    mapping(address => uint) projectIndexMap;\\n\\n    address public COMPOUND_COMET_ADDRESS;\\n    address public ONEINCH_ADDRESS;\\n    address public WETH_ADDRESS;\\n\\n    //Podium Round\\n    struct PodiumRound {\\n        uint256 endRoundDate;\\n    }\\n\\n    //Project index => \\n    //Replace string[20] with mapping(uint => string) if needed, then make mapping for\\n    mapping(uint256 => mapping(uint => string)) public projectIPFSHashes;\\n    //project index => nextIPFSHashID\\n    mapping(uint256 => uint256) public projectNextIPFSHashIDs;\\n    \\n    PodiumRound currentPodiumRound;\\n    //Mapped Project indexes to votes\\n    mapping(uint => uint) public podiumVotes;\\n\\n    constructor(address _compoundCometAddress, address _oneInchAddress, address _wethAddress) {\\n        COMPOUND_COMET_ADDRESS = _compoundCometAddress;\\n        ONEINCH_ADDRESS = _oneInchAddress;\\n        WETH_ADDRESS = _wethAddress;\\n    }\\n\\n    function createRound(uint256 _endProjectApplicationDate, uint256 _startRoundDate, uint256 _endRoundDate, StakingPlatform _platform) external payable onlyOwner {\\n//        require(block.timestamp > currentRound.endRoundDate, \\\"QuadraticFunding: Current round must end for new one to begin.\\\");\\n        currentRound = Round(_endProjectApplicationDate, _startRoundDate, _endRoundDate, msg.value, _platform);\\n        //TODO: Send to 1inch or Compound for staking\\n        if(_platform == StakingPlatform.OneInch) {\\n        \\n        } else if (_platform == StakingPlatform.Compound) {            \\n            IWETH9 weth = IWETH9(WETH_ADDRESS);\\n            weth.deposit{value: msg.value}();\\n            weth.approve(COMPOUND_COMET_ADDRESS, msg.value);\\n            Comet c = Comet(COMPOUND_COMET_ADDRESS);\\n            c.supply(WETH_ADDRESS, msg.value);\\n        }\\n    }\\n\\n    /**\\n     * Note: We assume the sign of a bad round is just based on endRoundDate\\n     */\\n    function deleteRound() external onlyOwner {\\n        require(block.timestamp > currentRound.endRoundDate, \\\"QuadraticFunding: Current round cannot be removed.\\\");\\n        currentRound.endRoundDate = uint256(0);\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function createProject(string memory _name) external returns (uint256 projectIndex) {\\n//        require(block.timestamp < currentRound.endProjectApplicationDate, \\\"QuadraticFunding: Project application time must be active\\\");\\n        projects.push(Project(payable(msg.sender), _name, 0, true));\\n        projectIndex = projects.length - 1;\\n        projectIndexMap[msg.sender] = projectIndex;\\n    }\\n\\n    function whitelistContributor(address contributor) external onlyOwner {\\n        contributorFlags[contributor] |= CONTRIBUTOR_WHITELIST;\\n    }\\n\\n    function revokeWhitelistContributor(address contributor) external onlyOwner {\\n        contributorFlags[contributor] &= ~(CONTRIBUTOR_WHITELIST);\\n    }\\n\\n    function contribute(uint256 projectIndex) external payable onlyContributor {\\n//        require(block.timestamp > currentRound.startRoundDate, \\\"QuadraticFunding: Round must be active\\\");\\n//        require(block.timestamp < currentRound.endRoundDate, \\\"QuadraticFunding: Round cannot be expired\\\");\\n        require((contributorFlags[msg.sender] & CONTRIBUTOR_CONTRIBUTED) != 0, \\\"QuadraticFunding: Contributer already submitted contribution\\\");\\n\\n        contributions[projectIndex][nextContributionID++] = Contribution(msg.sender, msg.value);\\n        projects[projectIndex].owner.transfer(msg.value);\\n        contributorFlags[msg.sender] |= CONTRIBUTOR_CONTRIBUTED;\\n    }\\n\\n    // After this function is called, we should have extra kept in the staking contract\\n    function quadraticFunding() external {\\n//        require(block.timestamp > currentRound.endRoundDate, \\\"QuadraticFunding: Round has not ended yet\\\");\\n        //Need to add something here to ensure it can't be called twice, e.g. bool\\n        if(currentRound.platform == StakingPlatform.OneInch) {\\n\\n        } else if(currentRound.platform == StakingPlatform.Compound) {\\n            Comet c = Comet(COMPOUND_COMET_ADDRESS);\\n            uint amount = currentRound.matchAmount;\\n            c.withdraw(WETH_ADDRESS, amount);\\n            IWETH9 weth = IWETH9(WETH_ADDRESS);\\n            weth.withdraw(amount);\\n        } \\n\\n        //Used as holding proportions, later transformed into funding amount\\n        uint[] memory proportions = new uint[](projects.length);\\n        uint proportionSum = 0;\\n        for(uint i = 0; i < projects.length; ++i) {\\n            proportions[i] = _quadraticFundingMath(i);\\n            proportionSum += proportions[i];\\n        }\\n        //Finally, calculate funding amounts and distribute\\n        for(uint i = 0; i < projects.length; ++i) {\\n            projects[i].owner.transfer((currentRound.matchAmount * proportions[i])/proportionSum);\\n        }\\n    }\\n\\n    function _quadraticFundingMath(uint pidx) internal view returns (uint) {\\n        uint sum = 0;\\n        for(uint i = 0; i < nextContributionID; ++i) {\\n            sum += Babylonian.sqrt(contributions[pidx][i].amount);\\n        }\\n        return sum * sum;\\n    }\\n\\n    //Create PodiumRound(done by owner)\\n    //uploadResults(string[] results) (get from msg.sender which we can use projectIndexMap to get the index and then associate that with the ipfsHashes)\\n\\n    function createPodiumRound(uint _endRoundDate) public onlyOwner {\\n        currentPodiumRound = PodiumRound(_endRoundDate);\\n    }\\n\\n    function uploadResults(string[] memory _ipfsHashes) public {\\n        uint projectIndex = projectIndexMap[msg.sender];\\n        for(uint i = 0; i < _ipfsHashes.length; ++i) {\\n            projectIPFSHashes[projectIndex][projectNextIPFSHashIDs[projectIndex]++] = _ipfsHashes[i];\\n        }\\n    }\\n\\n    function podiumVote(uint projectIndex) public {\\n        ++podiumVotes[projectIndex];\\n    }\\n\\n    //distributePodiumPrizes() 0. Pull the total amount of staked ETH from platform, withdraw all from platform, withdraw all from WETH. 1. Calculate all podiumVotes for each project, 2. Calculate the sum of podiumVotes, 3. Calculate each prize winnings by multiplying votes * total prize winnings / sum of podium Votes and distribute that amount\\n    function distributePodiumPrizes() public {\\n        uint128 amount;\\n        if(currentRound.platform == StakingPlatform.OneInch) {\\n        \\n        } else if(currentRound.platform == StakingPlatform.Compound) {\\n            Comet c = Comet(COMPOUND_COMET_ADDRESS);\\n            amount = c.collateralBalanceOf(address(this), WETH_ADDRESS);\\n            Comet(COMPOUND_COMET_ADDRESS).withdraw(WETH_ADDRESS, amount);\\n        }\\n        uint sumPodiumVotes = 0;\\n        for(uint i = 0; i < projects.length; ++i) {\\n            sumPodiumVotes += podiumVotes[i];\\n        }\\n\\n        for(uint i = 0; i < projects.length; ++i) {\\n            projects[i].owner.transfer((podiumVotes[i] * amount)/sumPodiumVotes);\\n        }\\n    }\\n\\n    //Projects ended, apply quadratic funding on matching amount\\n      //Retrieve from 1inch or Compound for payment\\n      //Replace in 1inch or Compound for staking the stake\\n    //3 month period - Podium Round, perform the same round\\n      //Straight vote; allocates proportion of votes percentage-based\\n    //Finally, withdraw staked stake in proportion to voters\\n\\n}\\n\",\"keccak256\":\"0x1507fac37083de8be089d1cca3983a0161470473a0fdf088ea8eff13a9f04484\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200192138038062001921833981016040819052620000349162000094565b600b80546001600160a01b039485166001600160a01b031991821617909155600c805493851693821693909317909255600d8054919093169116179055620000de565b80516001600160a01b03811681146200008f57600080fd5b919050565b600080600060608486031215620000aa57600080fd5b620000b58462000077565b9250620000c56020850162000077565b9150620000d56040850162000077565b90509250925092565b61183380620000ee6000396000f3fe6080604052600436106101145760003560e01c80636c49eec7116100a0578063b10e428e11610064578063b10e428e14610353578063c1cbbca714610373578063cabae69a14610386578063e58b53e6146103a6578063f1995e35146103c657600080fd5b80636c49eec7146102a157806376e123e6146102b65780637a8bbcfc146102d65780638a19c8bc146102eb578063923118da1461032657600080fd5b80633b44f903116100e75780633b44f903146101b95780633df1c7f0146101e657806352c2ce391461021357806354c1d83f1461023357806360f4a4e71461025357600080fd5b8063040141e51461011957806315ee4df11461015657806322b1e3a614610184578063395f32fa146101a6575b600080fd5b34801561012557600080fd5b50600d54610139906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561016257600080fd5b50610176610171366004611331565b6103db565b60405190815260200161014d565b34801561019057600080fd5b506101a461019f36600461136e565b6104d0565b005b6101a46101b4366004611387565b6104f3565b3480156101c557600080fd5b506101766101d436600461136e565b600f6020526000908152604090205481565b3480156101f257600080fd5b506102066102013660046113cc565b610729565b60405161014d91906113ee565b34801561021f57600080fd5b50600b54610139906001600160a01b031681565b34801561023f57600080fd5b506101a461024e36600461143c565b6107ce565b34801561025f57600080fd5b5061028961026e36600461143c565b6003602052600090815260409020546001600160801b031681565b6040516001600160801b03909116815260200161014d565b3480156102ad57600080fd5b506101a461082f565b3480156102c257600080fd5b506101a46102d136600461136e565b6108fb565b3480156102e257600080fd5b506101a4610938565b3480156102f757600080fd5b50600454600554600654600754600854610315949392919060ff1685565b60405161014d95949392919061147b565b34801561033257600080fd5b5061017661034136600461136e565b60116020526000908152604090205481565b34801561035f57600080fd5b506101a461036e3660046114c6565b610bb3565b6101a461038136600461136e565b610c40565b34801561039257600080fd5b50600c54610139906001600160a01b031681565b3480156103b257600080fd5b506101a46103c136600461143c565b610e23565b3480156103d257600080fd5b506101a4610e8a565b60408051608081018252338152602081018381526000928201839052600160608301819052600980549182018155845282517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af600490920291820180546001600160a01b0319166001600160a01b0390921691909117815591517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b0909101906104849082611611565b50604082015160028201556060909101516003909101805460ff19169115159190911790556009546104b8906001906116e7565b336000908152600a6020526040902081905592915050565b600081815260116020526040812080549091906104ec90611700565b9091555050565b6000546001600160a01b031633146105265760405162461bcd60e51b815260040161051d90611719565b60405180910390fd5b6040518060a0016040528085815260200184815260200183815260200134815260200182600181111561055b5761055b611465565b90528051600490815560208201516005556040820151600655606082015160075560808201516008805460ff19166001838181111561059c5761059c611465565b0217905550600091506105ac9050565b8160018111156105be576105be611465565b146107235760018160018111156105d7576105d7611465565b0361072357600d5460408051630d0e30db60e41b815290516001600160a01b0390921691829163d0e30db091349160048082019260009290919082900301818588803b15801561062657600080fd5b505af115801561063a573d6000803e3d6000fd5b5050600b5460405163095ea7b360e01b81526001600160a01b039182166004820152346024820152908516935063095ea7b3925060440190506020604051808303816000875af1158015610692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b69190611750565b50600b54600d54604051631e573fb760e31b81526001600160a01b039182166004820152346024820152911690819063f2b9fdb890604401600060405180830381600087803b15801561070857600080fd5b505af115801561071c573d6000803e3d6000fd5b5050505050505b50505050565b600e6020908152600092835260408084209091529082529020805461074d90611589565b80601f016020809104026020016040519081016040528092919081815260200182805461077990611589565b80156107c65780601f1061079b576101008083540402835291602001916107c6565b820191906000526020600020905b8154815290600101906020018083116107a957829003601f168201915b505050505081565b6000546001600160a01b031633146107f85760405162461bcd60e51b815260040161051d90611719565b6001600160a01b0316600090815260036020526040902080546001600160801b031981166001600160801b03909116176001179055565b6000546001600160a01b031633146108595760405162461bcd60e51b815260040161051d90611719565b60065442116108c55760405162461bcd60e51b815260206004820152603260248201527f51756164726174696346756e64696e673a2043757272656e7420726f756e642060448201527131b0b73737ba103132903932b6b7bb32b21760711b606482015260840161051d565b6000600681905560405133914780156108fc02929091818181858888f193505050501580156108f8573d6000803e3d6000fd5b50565b6000546001600160a01b031633146109255760405162461bcd60e51b815260040161051d90611719565b6040805160208101909152819052601055565b600060085460ff16600181111561095157610951611465565b14610a4557600160085460ff16600181111561096f5761096f611465565b03610a4557600b54600754600d5460405163f3fef3a360e01b81526001600160a01b03918216600482015260248101839052921691829063f3fef3a390604401600060405180830381600087803b1580156109c957600080fd5b505af11580156109dd573d6000803e3d6000fd5b5050600d54604051632e1a7d4d60e01b8152600481018590526001600160a01b039091169250829150632e1a7d4d90602401600060405180830381600087803b158015610a2957600080fd5b505af1158015610a3d573d6000803e3d6000fd5b505050505050505b60095460009067ffffffffffffffff811115610a6357610a6361127a565b604051908082528060200260200182016040528015610a8c578160200160208202803683370190505b5090506000805b600954811015610afb57610aa681611097565b838281518110610ab857610ab8611772565b602002602001018181525050828181518110610ad657610ad6611772565b602002602001015182610ae99190611788565b9150610af481611700565b9050610a93565b5060005b600954811015610bae5760098181548110610b1c57610b1c611772565b600091825260209091206004909102015483516001600160a01b03909116906108fc908490869085908110610b5357610b53611772565b6020026020010151600460030154610b6b919061179b565b610b7591906117b2565b6040518115909202916000818181858888f19350505050158015610b9d573d6000803e3d6000fd5b50610ba781611700565b9050610aff565b505050565b336000908152600a6020526040812054905b8251811015610bae57828181518110610be057610be0611772565b6020908102919091018101516000848152600e83526040808220600f909452812080549293929082610c1183611700565b9190505581526020019081526020016000209081610c2f9190611611565b50610c3981611700565b9050610bc5565b336000908152600360205260408120546001169003610ca15760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920636f6e7472696275746f722063616e2063616c6c20746869732e00604482015260640161051d565b336000908152600360205260408120546002169003610d285760405162461bcd60e51b815260206004820152603c60248201527f51756164726174696346756e64696e673a20436f6e747269627574657220616c60448201527f7265616479207375626d697474656420636f6e747269627574696f6e00000000606482015260840161051d565b604080518082018252338152346020808301919091526000848152600190915291822060028054929391929082610d5e83611700565b909155508152602080820192909252604001600020825181546001600160a01b0319166001600160a01b039091161781559101516001909101556009805482908110610dac57610dac611772565b600091825260208220600490910201546040516001600160a01b03909116913480156108fc02929091818181858888f19350505050158015610df2573d6000803e3d6000fd5b505033600090815260036020526040902080546001600160801b031981166001600160801b03909116176002179055565b6000546001600160a01b03163314610e4d5760405162461bcd60e51b815260040161051d90611719565b6001600160a01b0316600090815260036020526040902080546001600160801b031981166ffffffffffffffffffffffffffffffffe909116179055565b60008060085460ff166001811115610ea457610ea4611465565b14610fb357600160085460ff166001811115610ec257610ec2611465565b03610fb357600b54600d54604051632e12a4f760e11b81523060048201526001600160a01b0391821660248201529116908190635c2549ee90604401602060405180830381865afa158015610f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3f91906117d4565b600b54600d5460405163f3fef3a360e01b81526001600160a01b0391821660048201526001600160801b0384166024820152929450169063f3fef3a390604401600060405180830381600087803b158015610f9957600080fd5b505af1158015610fad573d6000803e3d6000fd5b50505050505b6000805b600954811015610fec57600081815260116020526040902054610fda9083611788565b9150610fe581611700565b9050610fb7565b5060005b600954811015610bae576009818154811061100d5761100d611772565b6000918252602080832060049092029091015483835260119091526040909120546001600160a01b03909116906108fc908490611054906001600160801b0388169061179b565b61105e91906117b2565b6040518115909202916000818181858888f19350505050158015611086573d6000803e3d6000fd5b5061109081611700565b9050610ff0565b600080805b6002548110156110e757600084815260016020818152604080842085855290915290912001546110cb906110f9565b6110d59083611788565b91506110e081611700565b905061109c565b506110f2818061179b565b9392505050565b60008160000361110b57506000919050565b816001600160801b82106111245760809190911c9060401b5b68010000000000000000821061113f5760409190911c9060201b5b64010000000082106111565760209190911c9060101b5b62010000821061116b5760109190911c9060081b5b610100821061117f5760089190911c9060041b5b601082106111925760049190911c9060021b5b6008821061119e5760011b5b60016111aa82866117b2565b6111b49083611788565b901c905060016111c482866117b2565b6111ce9083611788565b901c905060016111de82866117b2565b6111e89083611788565b901c905060016111f882866117b2565b6112029083611788565b901c9050600161121282866117b2565b61121c9083611788565b901c9050600161122c82866117b2565b6112369083611788565b901c9050600161124682866117b2565b6112509083611788565b901c9050600061126082866117b2565b905080821061126f5780611271565b815b95945050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156112b9576112b961127a565b604052919050565b600082601f8301126112d257600080fd5b813567ffffffffffffffff8111156112ec576112ec61127a565b6112ff601f8201601f1916602001611290565b81815284602083860101111561131457600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561134357600080fd5b813567ffffffffffffffff81111561135a57600080fd5b611366848285016112c1565b949350505050565b60006020828403121561138057600080fd5b5035919050565b6000806000806080858703121561139d57600080fd5b8435935060208501359250604085013591506060850135600281106113c157600080fd5b939692955090935050565b600080604083850312156113df57600080fd5b50508035926020909101359150565b600060208083528351808285015260005b8181101561141b578581018301518582016040015282016113ff565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561144e57600080fd5b81356001600160a01b03811681146110f257600080fd5b634e487b7160e01b600052602160045260246000fd5b600060a082019050868252856020830152846040830152836060830152600283106114b657634e487b7160e01b600052602160045260246000fd5b8260808301529695505050505050565b600060208083850312156114d957600080fd5b823567ffffffffffffffff808211156114f157600080fd5b818501915085601f83011261150557600080fd5b8135818111156115175761151761127a565b8060051b611526858201611290565b918252838101850191858101908984111561154057600080fd5b86860192505b8383101561157c5782358581111561155e5760008081fd5b61156c8b89838a01016112c1565b8352509186019190860190611546565b9998505050505050505050565b600181811c9082168061159d57607f821691505b6020821081036115bd57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610bae57600081815260208120601f850160051c810160208610156115ea5750805b601f850160051c820191505b81811015611609578281556001016115f6565b505050505050565b815167ffffffffffffffff81111561162b5761162b61127a565b61163f816116398454611589565b846115c3565b602080601f831160018114611674576000841561165c5750858301515b600019600386901b1c1916600185901b178555611609565b600085815260208120601f198616915b828110156116a357888601518255948401946001909101908401611684565b50858210156116c15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b818103818111156116fa576116fa6116d1565b92915050565b600060018201611712576117126116d1565b5060010190565b60208082526019908201527f4f6e6c79206f776e65722063616e2063616c6c20746869732e00000000000000604082015260600190565b60006020828403121561176257600080fd5b815180151581146110f257600080fd5b634e487b7160e01b600052603260045260246000fd5b808201808211156116fa576116fa6116d1565b80820281158282048414176116fa576116fa6116d1565b6000826117cf57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156117e657600080fd5b81516001600160801b03811681146110f257600080fdfea26469706673582212208ca183acfd198f23575394bc065ce5dbb852615d71877405e37db072dab4391764736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106101145760003560e01c80636c49eec7116100a0578063b10e428e11610064578063b10e428e14610353578063c1cbbca714610373578063cabae69a14610386578063e58b53e6146103a6578063f1995e35146103c657600080fd5b80636c49eec7146102a157806376e123e6146102b65780637a8bbcfc146102d65780638a19c8bc146102eb578063923118da1461032657600080fd5b80633b44f903116100e75780633b44f903146101b95780633df1c7f0146101e657806352c2ce391461021357806354c1d83f1461023357806360f4a4e71461025357600080fd5b8063040141e51461011957806315ee4df11461015657806322b1e3a614610184578063395f32fa146101a6575b600080fd5b34801561012557600080fd5b50600d54610139906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561016257600080fd5b50610176610171366004611331565b6103db565b60405190815260200161014d565b34801561019057600080fd5b506101a461019f36600461136e565b6104d0565b005b6101a46101b4366004611387565b6104f3565b3480156101c557600080fd5b506101766101d436600461136e565b600f6020526000908152604090205481565b3480156101f257600080fd5b506102066102013660046113cc565b610729565b60405161014d91906113ee565b34801561021f57600080fd5b50600b54610139906001600160a01b031681565b34801561023f57600080fd5b506101a461024e36600461143c565b6107ce565b34801561025f57600080fd5b5061028961026e36600461143c565b6003602052600090815260409020546001600160801b031681565b6040516001600160801b03909116815260200161014d565b3480156102ad57600080fd5b506101a461082f565b3480156102c257600080fd5b506101a46102d136600461136e565b6108fb565b3480156102e257600080fd5b506101a4610938565b3480156102f757600080fd5b50600454600554600654600754600854610315949392919060ff1685565b60405161014d95949392919061147b565b34801561033257600080fd5b5061017661034136600461136e565b60116020526000908152604090205481565b34801561035f57600080fd5b506101a461036e3660046114c6565b610bb3565b6101a461038136600461136e565b610c40565b34801561039257600080fd5b50600c54610139906001600160a01b031681565b3480156103b257600080fd5b506101a46103c136600461143c565b610e23565b3480156103d257600080fd5b506101a4610e8a565b60408051608081018252338152602081018381526000928201839052600160608301819052600980549182018155845282517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af600490920291820180546001600160a01b0319166001600160a01b0390921691909117815591517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b0909101906104849082611611565b50604082015160028201556060909101516003909101805460ff19169115159190911790556009546104b8906001906116e7565b336000908152600a6020526040902081905592915050565b600081815260116020526040812080549091906104ec90611700565b9091555050565b6000546001600160a01b031633146105265760405162461bcd60e51b815260040161051d90611719565b60405180910390fd5b6040518060a0016040528085815260200184815260200183815260200134815260200182600181111561055b5761055b611465565b90528051600490815560208201516005556040820151600655606082015160075560808201516008805460ff19166001838181111561059c5761059c611465565b0217905550600091506105ac9050565b8160018111156105be576105be611465565b146107235760018160018111156105d7576105d7611465565b0361072357600d5460408051630d0e30db60e41b815290516001600160a01b0390921691829163d0e30db091349160048082019260009290919082900301818588803b15801561062657600080fd5b505af115801561063a573d6000803e3d6000fd5b5050600b5460405163095ea7b360e01b81526001600160a01b039182166004820152346024820152908516935063095ea7b3925060440190506020604051808303816000875af1158015610692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b69190611750565b50600b54600d54604051631e573fb760e31b81526001600160a01b039182166004820152346024820152911690819063f2b9fdb890604401600060405180830381600087803b15801561070857600080fd5b505af115801561071c573d6000803e3d6000fd5b5050505050505b50505050565b600e6020908152600092835260408084209091529082529020805461074d90611589565b80601f016020809104026020016040519081016040528092919081815260200182805461077990611589565b80156107c65780601f1061079b576101008083540402835291602001916107c6565b820191906000526020600020905b8154815290600101906020018083116107a957829003601f168201915b505050505081565b6000546001600160a01b031633146107f85760405162461bcd60e51b815260040161051d90611719565b6001600160a01b0316600090815260036020526040902080546001600160801b031981166001600160801b03909116176001179055565b6000546001600160a01b031633146108595760405162461bcd60e51b815260040161051d90611719565b60065442116108c55760405162461bcd60e51b815260206004820152603260248201527f51756164726174696346756e64696e673a2043757272656e7420726f756e642060448201527131b0b73737ba103132903932b6b7bb32b21760711b606482015260840161051d565b6000600681905560405133914780156108fc02929091818181858888f193505050501580156108f8573d6000803e3d6000fd5b50565b6000546001600160a01b031633146109255760405162461bcd60e51b815260040161051d90611719565b6040805160208101909152819052601055565b600060085460ff16600181111561095157610951611465565b14610a4557600160085460ff16600181111561096f5761096f611465565b03610a4557600b54600754600d5460405163f3fef3a360e01b81526001600160a01b03918216600482015260248101839052921691829063f3fef3a390604401600060405180830381600087803b1580156109c957600080fd5b505af11580156109dd573d6000803e3d6000fd5b5050600d54604051632e1a7d4d60e01b8152600481018590526001600160a01b039091169250829150632e1a7d4d90602401600060405180830381600087803b158015610a2957600080fd5b505af1158015610a3d573d6000803e3d6000fd5b505050505050505b60095460009067ffffffffffffffff811115610a6357610a6361127a565b604051908082528060200260200182016040528015610a8c578160200160208202803683370190505b5090506000805b600954811015610afb57610aa681611097565b838281518110610ab857610ab8611772565b602002602001018181525050828181518110610ad657610ad6611772565b602002602001015182610ae99190611788565b9150610af481611700565b9050610a93565b5060005b600954811015610bae5760098181548110610b1c57610b1c611772565b600091825260209091206004909102015483516001600160a01b03909116906108fc908490869085908110610b5357610b53611772565b6020026020010151600460030154610b6b919061179b565b610b7591906117b2565b6040518115909202916000818181858888f19350505050158015610b9d573d6000803e3d6000fd5b50610ba781611700565b9050610aff565b505050565b336000908152600a6020526040812054905b8251811015610bae57828181518110610be057610be0611772565b6020908102919091018101516000848152600e83526040808220600f909452812080549293929082610c1183611700565b9190505581526020019081526020016000209081610c2f9190611611565b50610c3981611700565b9050610bc5565b336000908152600360205260408120546001169003610ca15760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920636f6e7472696275746f722063616e2063616c6c20746869732e00604482015260640161051d565b336000908152600360205260408120546002169003610d285760405162461bcd60e51b815260206004820152603c60248201527f51756164726174696346756e64696e673a20436f6e747269627574657220616c60448201527f7265616479207375626d697474656420636f6e747269627574696f6e00000000606482015260840161051d565b604080518082018252338152346020808301919091526000848152600190915291822060028054929391929082610d5e83611700565b909155508152602080820192909252604001600020825181546001600160a01b0319166001600160a01b039091161781559101516001909101556009805482908110610dac57610dac611772565b600091825260208220600490910201546040516001600160a01b03909116913480156108fc02929091818181858888f19350505050158015610df2573d6000803e3d6000fd5b505033600090815260036020526040902080546001600160801b031981166001600160801b03909116176002179055565b6000546001600160a01b03163314610e4d5760405162461bcd60e51b815260040161051d90611719565b6001600160a01b0316600090815260036020526040902080546001600160801b031981166ffffffffffffffffffffffffffffffffe909116179055565b60008060085460ff166001811115610ea457610ea4611465565b14610fb357600160085460ff166001811115610ec257610ec2611465565b03610fb357600b54600d54604051632e12a4f760e11b81523060048201526001600160a01b0391821660248201529116908190635c2549ee90604401602060405180830381865afa158015610f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3f91906117d4565b600b54600d5460405163f3fef3a360e01b81526001600160a01b0391821660048201526001600160801b0384166024820152929450169063f3fef3a390604401600060405180830381600087803b158015610f9957600080fd5b505af1158015610fad573d6000803e3d6000fd5b50505050505b6000805b600954811015610fec57600081815260116020526040902054610fda9083611788565b9150610fe581611700565b9050610fb7565b5060005b600954811015610bae576009818154811061100d5761100d611772565b6000918252602080832060049092029091015483835260119091526040909120546001600160a01b03909116906108fc908490611054906001600160801b0388169061179b565b61105e91906117b2565b6040518115909202916000818181858888f19350505050158015611086573d6000803e3d6000fd5b5061109081611700565b9050610ff0565b600080805b6002548110156110e757600084815260016020818152604080842085855290915290912001546110cb906110f9565b6110d59083611788565b91506110e081611700565b905061109c565b506110f2818061179b565b9392505050565b60008160000361110b57506000919050565b816001600160801b82106111245760809190911c9060401b5b68010000000000000000821061113f5760409190911c9060201b5b64010000000082106111565760209190911c9060101b5b62010000821061116b5760109190911c9060081b5b610100821061117f5760089190911c9060041b5b601082106111925760049190911c9060021b5b6008821061119e5760011b5b60016111aa82866117b2565b6111b49083611788565b901c905060016111c482866117b2565b6111ce9083611788565b901c905060016111de82866117b2565b6111e89083611788565b901c905060016111f882866117b2565b6112029083611788565b901c9050600161121282866117b2565b61121c9083611788565b901c9050600161122c82866117b2565b6112369083611788565b901c9050600161124682866117b2565b6112509083611788565b901c9050600061126082866117b2565b905080821061126f5780611271565b815b95945050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156112b9576112b961127a565b604052919050565b600082601f8301126112d257600080fd5b813567ffffffffffffffff8111156112ec576112ec61127a565b6112ff601f8201601f1916602001611290565b81815284602083860101111561131457600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561134357600080fd5b813567ffffffffffffffff81111561135a57600080fd5b611366848285016112c1565b949350505050565b60006020828403121561138057600080fd5b5035919050565b6000806000806080858703121561139d57600080fd5b8435935060208501359250604085013591506060850135600281106113c157600080fd5b939692955090935050565b600080604083850312156113df57600080fd5b50508035926020909101359150565b600060208083528351808285015260005b8181101561141b578581018301518582016040015282016113ff565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561144e57600080fd5b81356001600160a01b03811681146110f257600080fd5b634e487b7160e01b600052602160045260246000fd5b600060a082019050868252856020830152846040830152836060830152600283106114b657634e487b7160e01b600052602160045260246000fd5b8260808301529695505050505050565b600060208083850312156114d957600080fd5b823567ffffffffffffffff808211156114f157600080fd5b818501915085601f83011261150557600080fd5b8135818111156115175761151761127a565b8060051b611526858201611290565b918252838101850191858101908984111561154057600080fd5b86860192505b8383101561157c5782358581111561155e5760008081fd5b61156c8b89838a01016112c1565b8352509186019190860190611546565b9998505050505050505050565b600181811c9082168061159d57607f821691505b6020821081036115bd57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610bae57600081815260208120601f850160051c810160208610156115ea5750805b601f850160051c820191505b81811015611609578281556001016115f6565b505050505050565b815167ffffffffffffffff81111561162b5761162b61127a565b61163f816116398454611589565b846115c3565b602080601f831160018114611674576000841561165c5750858301515b600019600386901b1c1916600185901b178555611609565b600085815260208120601f198616915b828110156116a357888601518255948401946001909101908401611684565b50858210156116c15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b818103818111156116fa576116fa6116d1565b92915050565b600060018201611712576117126116d1565b5060010190565b60208082526019908201527f4f6e6c79206f776e65722063616e2063616c6c20746869732e00000000000000604082015260600190565b60006020828403121561176257600080fd5b815180151581146110f257600080fd5b634e487b7160e01b600052603260045260246000fd5b808201808211156116fa576116fa6116d1565b80820281158282048414176116fa576116fa6116d1565b6000826117cf57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156117e657600080fd5b81516001600160801b03811681146110f257600080fdfea26469706673582212208ca183acfd198f23575394bc065ce5dbb852615d71877405e37db072dab4391764736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deleteRound()": {
        "notice": "Note: We assume the sign of a bad round is just based on endRoundDate"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 366,
        "contract": "contracts/QuadraticFunding.sol:QuadraticFunding",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 426,
        "contract": "contracts/QuadraticFunding.sol:QuadraticFunding",
        "label": "contributions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Contribution)433_storage))"
      },
      {
        "astId": 428,
        "contract": "contracts/QuadraticFunding.sol:QuadraticFunding",
        "label": "nextContributionID",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 437,
        "contract": "contracts/QuadraticFunding.sol:QuadraticFunding",
        "label": "contributorFlags",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint128)"
      },
      {
        "astId": 446,
        "contract": "contracts/QuadraticFunding.sol:QuadraticFunding",
        "label": "currentRound",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Round)410_storage"
      },
      {
        "astId": 450,
        "contract": "contracts/QuadraticFunding.sol:QuadraticFunding",
        "label": "projects",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(Project)419_storage)dyn_storage"
      },
      {
        "astId": 454,
        "contract": "contracts/QuadraticFunding.sol:QuadraticFunding",
        "label": "projectIndexMap",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 456,
        "contract": "contracts/QuadraticFunding.sol:QuadraticFunding",
        "label": "COMPOUND_COMET_ADDRESS",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 458,
        "contract": "contracts/QuadraticFunding.sol:QuadraticFunding",
        "label": "ONEINCH_ADDRESS",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 460,
        "contract": "contracts/QuadraticFunding.sol:QuadraticFunding",
        "label": "WETH_ADDRESS",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 469,
        "contract": "contracts/QuadraticFunding.sol:QuadraticFunding",
        "label": "projectIPFSHashes",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_string_storage))"
      },
      {
        "astId": 473,
        "contract": "contracts/QuadraticFunding.sol:QuadraticFunding",
        "label": "projectNextIPFSHashIDs",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 476,
        "contract": "contracts/QuadraticFunding.sol:QuadraticFunding",
        "label": "currentPodiumRound",
        "offset": 0,
        "slot": "16",
        "type": "t_struct(PodiumRound)463_storage"
      },
      {
        "astId": 480,
        "contract": "contracts/QuadraticFunding.sol:QuadraticFunding",
        "label": "podiumVotes",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Project)419_storage)dyn_storage": {
        "base": "t_struct(Project)419_storage",
        "encoding": "dynamic_array",
        "label": "struct QuadraticFunding.Project[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(StakingPlatform)398": {
        "encoding": "inplace",
        "label": "enum QuadraticFunding.StakingPlatform",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint128)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint128)",
        "numberOfBytes": "32",
        "value": "t_uint128"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_string_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => string))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_string_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Contribution)433_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct QuadraticFunding.Contribution))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Contribution)433_storage)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Contribution)433_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct QuadraticFunding.Contribution)",
        "numberOfBytes": "32",
        "value": "t_struct(Contribution)433_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Contribution)433_storage": {
        "encoding": "inplace",
        "label": "struct QuadraticFunding.Contribution",
        "members": [
          {
            "astId": 430,
            "contract": "contracts/QuadraticFunding.sol:QuadraticFunding",
            "label": "contributor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 432,
            "contract": "contracts/QuadraticFunding.sol:QuadraticFunding",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PodiumRound)463_storage": {
        "encoding": "inplace",
        "label": "struct QuadraticFunding.PodiumRound",
        "members": [
          {
            "astId": 462,
            "contract": "contracts/QuadraticFunding.sol:QuadraticFunding",
            "label": "endRoundDate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Project)419_storage": {
        "encoding": "inplace",
        "label": "struct QuadraticFunding.Project",
        "members": [
          {
            "astId": 412,
            "contract": "contracts/QuadraticFunding.sol:QuadraticFunding",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 414,
            "contract": "contracts/QuadraticFunding.sol:QuadraticFunding",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 416,
            "contract": "contracts/QuadraticFunding.sol:QuadraticFunding",
            "label": "matchedQFFunds",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 418,
            "contract": "contracts/QuadraticFunding.sol:QuadraticFunding",
            "label": "active",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Round)410_storage": {
        "encoding": "inplace",
        "label": "struct QuadraticFunding.Round",
        "members": [
          {
            "astId": 400,
            "contract": "contracts/QuadraticFunding.sol:QuadraticFunding",
            "label": "endProjectApplicationDate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 402,
            "contract": "contracts/QuadraticFunding.sol:QuadraticFunding",
            "label": "startRoundDate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 404,
            "contract": "contracts/QuadraticFunding.sol:QuadraticFunding",
            "label": "endRoundDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 406,
            "contract": "contracts/QuadraticFunding.sol:QuadraticFunding",
            "label": "matchAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 409,
            "contract": "contracts/QuadraticFunding.sol:QuadraticFunding",
            "label": "platform",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(StakingPlatform)398"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}